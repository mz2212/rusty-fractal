#[macro_use]
extern crate glium;

use glium::{glutin, Surface};

mod mandelbrot;

fn main() {
	// GL setup
	let mut event_loop = glutin::EventsLoop::new();
	let window = glutin::WindowBuilder::new();
	let context = glutin::ContextBuilder::new();
	let display = glium::Display::new(window, context, &event_loop).unwrap();

	// Set up square we're drawing to with pixel shader
	// For some reason I can't draw quads with glium
	implement_vertex!(Vertex, pos);
	let vert1 = Vertex { position: [-1.0, -1.0] };
    let vert2 = Vertex { position: [1.0, -1.0] };
    let vert3 = Vertex { position: [1.0, 1.0] };
    let vert4 = Vertex { position: [-1.0, -1.0] };
    let vert5 = Vertex { position: [-1.0, 1.0] };
    let vert6 = Vertex { position: [1.0, 1.0] };
    let shape = vec![vert1, vert2, vert3, vert4, vert5, vert6];

	// Vertex Buffer and indices
	let vert_buf = glium::VertexBuffer::new(&display, &shape).unwrap();
	let indices = glium::index::NoIndices(glium::index::PrimitiveType::TrianglesList);

	let vertex_shader_src = r#"
		#version 140

		in vec2 position;

		void main() {
			gl_position = vec4(position, 0.0, 1.0);
		}
	"#;
}

struct Vertex {
	pos: [f32; 2],
}
