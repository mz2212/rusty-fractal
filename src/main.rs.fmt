extern crate sdl2;
extern crate hsv_rgb;

use sdl2::pixels::Color;
use sdl2::event::Event;
use sdl2::keyboard::Keycode;
use std::time::Duration;

const width: u32 = 1280;
const height: u32 = 720;
const singleHueMode: bool = true;
const hue: u8 = 220;

fn main() {
    let mut sdl_quit = false;
    let mut calc_brot = true;
    let mut max_iter = 300;
    let mut zoom = 1.0;
    let mut move_x = -0.5;
    let mut move_y = 0.0;

    // SDL setup. Go takes care of this bit.
    let sdl_context = sdl2::init().unwrap();
    let mut event_pump = sdl_context.event_pump().unwrap();
    let video_subsystem = sdl_context.video().unwrap();
    // You do the below in Go as well.iter
    let window = video_subsystem.window("Mandelbrot", width, height)
        .position_centered()
        .opengl()
        .build()
        .unwrap();
    
    let mut canvas = window.into_canvas().build().unwrap();

    while !sdl_quit {
        if calc_brot {
            canvas.clear();
            let mut iter_array: [[u32; width as usize]; height as usize] = [[0; width as usize]; height as usize];
            for x in 0..width {
                for y in 0..height {
                    iter_array[y as usize][x as usize] = crunch(max_iter, x, y, zoom, move_x, move_y)
                }
            }

            for x in 0..width {
                for y in 0..height {
                    paint(x, y, iter_array[y as usize][x as usize], max_iter, &mut canvas)
                }
            }
            canvas.present();
            calc_brot = false;
        }

        for event in event_pump.poll_iter() {
            match event {
                Event::Quit {..} => {
                    sdl_quit = true;
                },
                _ => {}
            }
        }
        ::std::thread::sleep(Duration::new(0, 1_000_000_000u32 / 60));
    }
}

fn paint(x: u32, y: u32, iter: u32, max_iter: u32, canvas: &mut sdl2::render::Canvas<sdl2::video::Window>) {
    let mut color = hsv_rgb::RGBColor::new(0, 0, 0);
    if singleHueMode {
        color = hsv_rgb::HSVColor{
            h: hue,
            s: 255,
            v: (iter % 256) as u8 * (iter < max_iter) as u8,
        }.to_rgb();
    } else {
        color = hsv_rgb::HSVColor{
            h: (iter % 256) as u8,
            s: 255,
            v: 255 * (iter < max_iter) as u8
        }.to_rgb();
    }
    canvas.set_draw_color(Color::RGB(color.r, color.g, color.b));
    canvas.draw_point(sdl2::rect::Point::new(x as i32, y as i32));
}

fn crunch(max_iter: u32, x: u32, y: u32, zoom: f64, move_x: f64, move_y: f64) -> u32 {
    let mut pix_imag;
    let mut pix_real;
    let mut old_imag;
    let mut old_real;
    let mut new_imag;
    let mut new_real;
    let mut iter = 0;

    pix_real = 1.5*(x as f64 - width as f64/2.0)/(0.5*zoom*width as f64) + move_x;
    pix_imag = (y as f64 - height as f64/2.0)/(0.5*zoom*height as f64) + move_y;
    new_real = 0.0;
    new_imag = 0.0;
    for i in 0..max_iter {
        iter = i;
        old_real = new_real;
        old_imag = new_imag;

        new_real = old_real*old_real - old_imag*old_imag + pix_real;
        new_imag = 2.0*old_real*old_imag + pix_imag;
        if new_real*new_real+new_imag*new_imag > 4.0 {
            break
        }
    }
    iter
}